package com.yedam.java.ch0502_01;

public class ReferenceTypeExample {

	public static void main(String[] args) {
		
		//✨ 배열 선언 방법
		// 배열을 이루는 타입 지정하고 [] 변수이름;
		int[] intAry = null;
		// 배열은 모든 타입을 값으로 가질 수 있음. boolean, 심지어 배열도 값으로 가질 수 있음
		// int intAry2[]; 도 가능한데 보통 위처럼 씀
//		System.out.println("intAry[0]: " + intAry[0]); // null값을 줬는데 왜 접근하냐... NullPointerException 에러가 남.
		//🍋 배열의 실제 값 찾는 법
		// -> 배열 변수 이름[접근하고자 하는 배열의 인덱스 번호]
		
		// int[] ary = new int[3]; 이라고 크기만 있는 배열을 만들면 
		// 3칸짜리 객체가 생기고, 객체의 번호가 부여되는 것
		// 따라서 값이 없으면 인덱스를 찾고 싶어도 실제 객체에는 값이 없으니까 뭘 할 수가 없음..
		
		//🍋 값을 초기화하면서 배열을 생성
		int[] scores = { 83, 90, 87 }; // 배열로 선언했는데 값을 주는 방식은 객체처럼 줌; 머야;
		// 이게 가능한 이유? 자바에서 객체는 위처럼 값 절대 못 줌.
		// 자바에서 저렇게 쓰는 건 객체 개념이 아님
		
		// 이렇게 하면 힙 영역에 83, 90, 87 값을 가진 객체가 생성. 이 객체의 고유 주소를 스택에 연결함.
		// 힙 영역은 개발자가 직접 손 댈 수 있는 영역이 아님!
		// 무조건 스택을 통해서 접근해야함
		// 엄밀히 따지면 스택에 있는 변수는 '객체가 있는 주소' 하나를 값으로 가지는거임
		
		System.out.println("scores[0]:" + scores[0]);
		System.out.println("scores[1]:" + scores[1]);
		System.out.println("scores[2]:" + scores[2]);
		//🍋 배열의 실제 값 찾는 법
		// -> 배열 변수 이름[접근하고자 하는 배열의 인덱스 번호]
		// 그냥 score만 쓰면 그 배열 안의 모든 값을 가져옴! 당연함. 그 값 전부가 하나의 배열이기 때문
		
		
		// 배열은 for문과 궁합이 좋다
		// (인덱스는 정수이고, 무조건 0부터 시작하고, 카운팅은 1씩 증가함) -> 규칙이 있다!
		// for문을 사용하면 배열의 인덱스를 하나씩 꺼내 쓸 수 있음
		int sum = 0;
		for(int i=0; i<3; i++) { // 주의! 크기가 같다(=)는 빠짐!!! 인덱스와 크기는 항상 1만큼 차이남. 크기와 같아지면 예외가 생김.
			sum += scores[i];
		}
		
//		for(int i=0; i<=3; i++) { // 주의! =를 붙이면 배열이 가질 수 있는 범위를 벗어났다는 오류가 생김(ArrayIndexOutOfBoundsException)
//			sum += scores[i];
//		}
		
//		// 이렇게 풀어써야 하는 걸, 인덱스가 가지고 있는 정수와 1씩 증가하는 성격을 이용해 반복문으로 쉽게 구함
//		sum += scores[0];
//		sum += scores[1];
//		sum += scores[2];
		
		System.out.println("총합: " + sum);
		double avg = sum / 3.0; // 소수점까지 정확하게 나오게 하려고 실수 사용
		System.out.println("평균: " + avg);
		
		
		// 주의사항
		// 변수를 먼저 선언만 하고 나중에 값을 넣어 사용할 수는 없음
		int[] scoreList;
//		scoreList = { 83, 90, 87};
		// 변수를 선언하면서 값을 같이 줄 때는 가능!
		// 그래도 이렇게 쓰고싶은디요..
		// 그럼 new연산자를 사용해야함!
		scoreList = new int[] { 83, 90, 87 };
//		scoreList = new int[5] { 83, 90, 87 };
		// 값을 정확하게 줄 때는 크기를 줄 수 없음! 내가 준 값을 기준으로 크기가 형성되고, 값이 하나씩 들어가는것
		
		// 배열도 객체임. 객체는 원칙적으로 new연산자를 사용해 이렇게 써야 함!
		// 크기는 주면 안 됨!!
		// but 자바가 예외적으로 변수를 선언하면서 값을 같이 적을 수 있게 해 준 거임. 그래서 선언 따로, 값 따로 걍 줄 수는 없음
		
		
		

		/*
		// 참고) 클래스 테스트
		User user = new User(); // User는 class 타입이고, 반드시 new 연산자를 사용해 만들어져야 함
		user.name = "홍길동"; // 값을 각각 개별적으로 줘야 함
		user.age = 25;
		user.height = 175.7;
		// 자바에서는 아래처럼 절대로 값을 줄 수 없음!!
		
		// 자바스크립트에서는 이렇게 객체 형태로 접근해서 값을 줄 수도 있음
//		let user = {
//				name: '홍길동',
//				age: 25,
//				height: 175.7
//		};
		*/
	}

}
